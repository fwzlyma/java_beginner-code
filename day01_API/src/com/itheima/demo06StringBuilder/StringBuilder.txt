## StringBuilder 类
    作用：由于字符串是不可改变的，所以字符串操作占用的空间多
         为了解决这个问题，就要用字符串缓冲区StringBuilder类
    是什么：
        字符串缓冲区，可以提高字符串的操作效率（看成一个长度可以变化的字符串）
        底层也是一个数组，但是被final修饰，可以改变长度
        byte[] value = new byte[16];

        StringBuilder在内存中始终是一个数组，占用空间少，效率高
        如果超出了StringBuilder的容量，会自动地扩容

    构造方法:
         java.lang.StringBuilder类：字符串缓冲区，可以提高字符串的效率
         -public StringBuilder(int capacity)：
            构造一个不带任何字符的字符串生成器，其初始容量由 capacity 参数指定。
         -public StringBuilder(String str)
            构造一个字符串生成器，并初始化为指定的字符串内容。该字符串生成器的初始容量为 16 加上字符串参数的长度。

    成员方法：
        public StringBuilder append(...):
            添加任意类型数据的字符串形式，并【返回当前对象自身】。
        1.StringBuilder节省空间的特点：
            //1.创建一个StringBuilder对象
            StringBuilder bu1 = new StringBuilder();
            //2.使用append方法往StringBuilder中添加数据
            /*append方法返回的是this，调用方法的对象bu1*/
            StringBuilder bu2 = bu1.append("abc");
            System.out.println(bu1);//abc
            System.out.println(bu2);//abc
            System.out.println(bu1 == bu2);//true 说明两个对象是同一个对象
        2.bu2==bu1 因此无需每次都接收返回值，可以直接操作bu1
            //1.创建StringBuilder对象
            StringBuilder bu1 = new StringBuilder();
            bu1.append("abc");
            bu1.append("def");
            bu1.append(1);
            bu1.append(true);
            bu1.append(8.8);
            bu1.append('中');
            System.out.println(bu1);


## String 类
    字符串是常量：它们的值在创建之后不能更改。
    字符串的底层是一个被final修饰的数组，不能改变，是一个常量。
    private final byte[] value;

    进行字符串的相加，内存中就会有多个字符串，占用空间多，效率低下。
    String s = "a" + "b" + "c" = "abc"
    "a" "b" "c"
        +
    "ab" "c"
        +
    "abc"


## 链式编程
    方法的返回值是一个对象，可以根据对象继续调用方法：
        System.out.println("abc".toUpperCase().toLowerCase().toUpperCase().toLowerCase().toUpperCase());
        StringBuilder bu1 = new StringBuilder();
        bu1.append("abc").append(123).append(true).append(8.8).append('中');
        System.out.println(bu1);