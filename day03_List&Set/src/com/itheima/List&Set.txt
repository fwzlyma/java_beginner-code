## 数据结构——栈
    先进后出，后进先出。
    stack,又称堆栈，它是运算受限的线性表，其限制是仅允许在标的一端进行插入和删除操作
    不允许在其他任何位置进行添加、查找、删除等操作。
## 数据结构——队列
    先进先出。
## 数据结构——数组
    查询快：数组的地址是连续的，我们通过数组的首地址可以找到数组，通过数组的索引可以快速找到某一个元素。
    增删慢：数组的长度是固定的，我们想要增加/删除一个元素，必须创建一个新数组，把源数组的数据复制过来。
    集合--长度可变
    数组--长度不可变。
        要把数组索引是3的元素删除，必须创建一个新的数组，长度是原数组的长度-1
        把原数组的其他元素复制到新数组中
        在新数组的地址赋值给变量arr
        原数组会在内存中被销毁（垃圾回收）

## 数据结构——链表
    查询慢：链表地址不是连续的，每次查询元素，必须从头开始查询
    增删快：链表结构，增加/删除一个元素，对链表的整体结构没有影响，所以增删快。
    节点：
        链表中的每一个元素。
        一个节点包含了一个数据源（存储数组），两个指针域（存储地址）
    单向链表：
        链表中只有一条链子，不能保证元素的顺序（存储元素和取出元素的顺序有可能不一致）
    双向链表：
        链表中有两条链子，有一条链子是专门记录元素的顺序，是一个有序的集合。

## 数据结构——红黑树
    二叉树：左子树、右子树。

## HashSet集合存储数据结构（哈希表）
    jdk1.8之前：哈希表=数组+链表
    jdk1.8之后：
               哈希表=数组+链表
               哈希表=数组+红黑树（提高查询速度）
    哈希表的特点：速度快
    数据结构：
        把元素进行了分组：
            相同哈希值的元素是一组；
            链表/红黑树结构把相同哈希值的元素连接到一起。
